@*Anything within the "@" and "{}" sign is a razor code*@
@*This page is the boilerplate for all view pages, what this means is that any page that calls this page doesn't need to bother about things like header, footer and the standard template for HTML pages, all those pages need to do is write code for their specific page*@
<!DOCTYPE html>
<html>
<head>
    @*Anything declared within the razor code can be plugged into the HTML and it'll work*@
    <title>Dutch Treat: @ViewBag.Title</title>
    @*What the "~/" means is that the path is going to be at the root of the website/program*@
    @*Only use absolute path declaration where you're sure what you're referring to will be there*@
    @*You need to be aware that the order of your stylesheet links matter, we're putting the bootstrap link before our own stylesheet so our stylesheet can override bootstrap should such a clash happen.*@
    <link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="~/lib/fortawesome/fontawesome-free/css/all.min.css" rel="stylesheet" />
    <link href="~/css/site.css" rel="stylesheet" />
</head>
<body>
    <header class="container">
        <nav class="navbar navbar-dark bg-dark navbar-expand-md">
            <h1 class="navbar-brand"><i class="fas fa-paint-brush"></i> Dutch Treat</h1>
            <button class="navbar-toggler" data-toggle="collapse" data-target="#theMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div id="theMenu" class="navbar-collapse collapse">
                <ul class="navbar-nav">
                    @*All the commented code below is better refactored using tag helpers so the urls aren't hardcoded which can be beneficial if the routing changes*@
                    @*Code*@
                    @*<li><a href="/">Home</a></li>
                        <li><a href="/app/contact">Contact</a></li>
                        <li><a href="/app/about">About</a></li>*@
                    <li class="nav-item">
                        <a  class="nav-link" asp-controller="App" asp-action="Index">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" asp-controller="App" asp-action="Contact">Contact</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" asp-controller="App" asp-action="About">About</a>
                    </li>
                </ul>
            </div>
        </nav>
    </header>
    <section class="container">
        <h2 class="text-center">@ViewBag.Title</h2>
        @*The "@RenderBody()" code written below is what calls the code from other pages. When a page references the layout page, they are able to borrow all the code in the layout page, the code specific to that page is inserted in the RenderBody part of the _Layout page*@
        @RenderBody()
    </section>
    <footer class="container">
        <div class="text-center">Copyright 2021 Dutch Treat LLC</div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    @*We're putting bootstrap js after jquery and before our js file because bootstrap js runs off jquery and we want to still be able to overwrite any bootstrap js code*@ 
    <script src="~/lib/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="~/js/index.js"></script>

    @*What the code below does is render the jquery client side libraries that were added to the project within multiple pages*@
    @*The "false" parameter that was specified simply means the jquery library being installed in the project won't take effect in every page*@
    @*The opposite of the "false" parameter is the "required" parameter which means every page will use the "Scripts"*@
    @RenderSection("Scripts", false)
</body>
</html>